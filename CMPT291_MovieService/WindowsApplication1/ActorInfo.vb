Imports System.Data.OleDb

Public Class ActorInfo
    Private dataReader As OleDbDataReader
    Private connection As OleDbConnection = New OleDbConnection(LoginForm.GetConnectionString())
    Private command As OleDbCommand

    Private addMode As Boolean = False
    Private emptyList As Boolean = False


    'Enables and disables various control based on log in access level
    Private Sub setAccessControl()
        'Enable some options for the manager that the employee cannot see
        If LoginForm.getAccessLevel() = 1 Then
            For Each item As Control In Me.Controls
                item.Visible = True
                item.Enabled = True
            Next
        Else
            For Each txtBox As Control In Me.Controls
                If txtBox.GetType() Is GetType(TextBox) Then
                    txtBox.Enabled = False
                End If
            Next
        End If

        'No one can muck around with an actors rating
        RateBox.Enabled = False
        'Age is calculated based on date of birth
        AgeBox.Enabled = False
        'Actor ID is auto generated by the database
        ActorIDBox.Enabled = False
    End Sub


    Private Sub populateGenderComboBox()
        'make all employed positions a selectable option
        Dim genderList As List(Of String) = New List(Of String)
        genderList.Add("Male")
        genderList.Add("Female")
        genderList.Add("Other")
        GenderComboBox.DataSource = genderList
        GenderComboBox.SelectedIndex = 0
    End Sub


    'Return whether or not we are adding a new employee
    Private Function isAddEnabled() As Boolean
        Return addMode
    End Function

    Private Sub EnableAddActor(enabled As Boolean)
        addMode = enabled

        'If we are adding a new employee, clear all text boxes and enable them 
        If addMode Then

            For Each txtBox As Control In Me.Controls
                If txtBox.GetType() Is GetType(TextBox) Then
                    txtBox.Enabled = True
                    txtBox.Text = Nothing
                End If
            Next
            'enable the combo box
            GenderComboBox.Enabled = True
            'Set default rating
            RateBox.Enabled = False
            RateBox.Text = 0
            AgeBox.Enabled = False
            ActorIDBox.Enabled = False

            AddUpdateButton.Text = "Add Actor"
            ResultBox.Enabled = False

            'can't delete an actor that doesn't exists
            DeleteEmployeeButton.Enabled = False

            'Switch cancel/close button text
            CancelButton.Text = "Cancel"
        Else
            'Otherwise, set the default permissions
            setAccessControl()
            AddUpdateButton.Text = "Update Actor"
            CancelButton.Text = "Close"
        End If
    End Sub

    'Generate a list of all employees
    Private Function SearchForActors() As List(Of ActorType)
        Dim actorItems = New List(Of ActorType)
        Try
            connection.Open()
            command = connection.CreateCommand()
            command.CommandText = "Select ActorID, FamilyName, GivenName, Gender, Age from Actor"

            dataReader = command.ExecuteReader()

            Do While dataReader.Read()
                actorItems.Add(New ActorType(dataReader(0),
                                               dataReader(1).ToString, dataReader(2).ToString,
                                               dataReader(3), dataReader(4).ToString))
            Loop

        Catch ex As Exception
            'MsgBox(ex.ToString)
        End Try

        dataReader.Close()
        connection.Close()
        Return actorItems
    End Function

    Private Function GetActorRating(actor As ActorType) As Integer
        Dim rating As Integer = 0
        Try
            connection.Open()
            command = connection.CreateCommand()
            'Average all ratings for current actor
            command.CommandText = "Select AVG(Rating) From ActorRating Where ActorID = " + actor.ID.ToString
            Dim avgRating As Object = command.ExecuteScalar()

            'Make sure a rating exists
            If avgRating.GetType() IsNot GetType(DBNull) Then
                rating = CInt(avgRating)
            End If
        Catch ex As Exception
            MsgBox(ex.ToString)
        End Try
        connection.Close()
        Return rating
    End Function

    'Populates the list box with all the current actors
    'The returned value from a selected entry in the list box, is the employee ID
    Private Sub UpdateActorList()
        Dim entries As List(Of ActorType) = SearchForActors()
        If entries.Count = 0 Then
            MsgBox("No actors found")
            'Me.Close()
            EnableAddActor(True)
            emptyList = True
        Else
            emptyList = False
            Dim str As String = entries.Count.ToString + " actors found."
            MsgBox(str)
            ResultBox.DataSource = entries
            ResultBox.DisplayMember = "Display"
            ResultBox.ValueMember = "Itself"
            ResultBox.SelectedIndex = 0
            setAccessControl()
        End If
    End Sub


    Private Sub GetActorData(actor As ActorType)
        FnameBox.Text = actor.Name()
        LnameBox.Text = actor.LName()
        DayBox.Text = actor.Age.Day
        MonthBox.Text = actor.Age.Month
        YearBox.Text = actor.Age.Year
        GenderComboBox.Text = actor.Gender()
        RateBox.Text = GetActorRating(actor).ToString
        AgeBox.Text = actor.GetActorAgeInYears(actor).ToString
        ActorIDBox.Text = actor.ID.ToString
    End Sub

    'Creates a new actor
    Private Sub AddActor()
        Try
            'Make birthdate to insert into age
            Dim birthdate As DateTime = New DateTime(YearBox.Text, MonthBox.Text, DayBox.Text)
            connection.Open()
            command = connection.CreateCommand()


            'Insert Actor Information
            command.CommandText = "insert into Actor(FamilyName, GivenName, Gender, Age) values ('" + FnameBox.Text + "', '" _
                                 + LnameBox.Text + "','" _
                                 + GenderComboBox.SelectedItem + "', #" + birthdate + "#)"
            command.ExecuteNonQuery()

            MsgBox("Successfully added Actor")
        Catch ex As Exception
            MsgBox(ex.ToString)
        End Try

        connection.Close()
    End Sub

    Private Sub UpdateActor(actor As ActorType)
        Try
            'Make birthdate to insert into age
            Dim birthdate As DateTime = New DateTime(YearBox.Text, MonthBox.Text, DayBox.Text)

            connection.Open()
            command = connection.CreateCommand()
            'Update the editabble password field (so we can change account passwords)
            command.CommandText = "Update Actor set FamilyName = '" + FnameBox.Text + "', GivenName = '" + LnameBox.Text + "', " _
                                + "Age = #" + birthdate + "#, Gender = '" + GenderComboBox.SelectedItem + "' Where ActorID = " _
                                + actor.ID().ToString
            command.ExecuteNonQuery()


            MsgBox("Updated Actor")
        Catch ex As Exception
            MsgBox(ex.ToString)
        End Try

        connection.Close()
    End Sub

    'Deletes an Actor
    'ToDo: need to update any movie entries that the deleted actor acts in
    Private Sub DeleteActor(actor As ActorType)
        Try
            connection.Open()
            command = connection.CreateCommand()

            'Then delete Actor data
            command.CommandText = "delete from Actor where ActorID = " + actor.ID.ToString
            command.ExecuteNonQuery()

            'Delete the actors ratings
            command.CommandText = "delete from ActroRating where ActorID = " + actor.ID.ToString
            command.ExecuteNonQuery()

            MsgBox("Actor Deleted")
        Catch ex As Exception
            MsgBox(ex.ToString)
        End Try

        connection.Close()
    End Sub

    'Returns true if all the required data to add / edit a user has been filled in
    Private Function safeToAdd() As Boolean
        For Each txtBox As Control In Me.Controls
            If txtBox.GetType() Is GetType(TextBox) Then
                If txtBox.Enabled And txtBox.Text = Nothing Then
                    Return False
                End If
            End If
        Next

        Return True
    End Function

    Private Sub ActorInfo_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        populateGenderComboBox()
        UpdateActorList()
    End Sub

    'Open this form directly to a specified actor from outside the form
    Public Sub Display(actorID As Integer)
        Me.Show()
        ResultBox.SelectedValue = actorID
    End Sub

    Private Sub ResultBox_SelectedValueChanged(sender As Object, e As EventArgs) Handles ResultBox.SelectedValueChanged
        GetActorData(ResultBox.SelectedValue)
    End Sub

    Private Sub CancelButton_Click(sender As Object, e As EventArgs) Handles CancelButton.Click
        If isAddEnabled() And Not emptyList Then
            'Cancel adding a new employee
            EnableAddActor(False)
            ResultBox_SelectedValueChanged(ResultBox, Nothing)
        Else
            'Otherwise, just close the menu
            Me.Close()
        End If
    End Sub

    Private Sub NewEmployeeButton_Click(sender As Object, e As EventArgs) Handles NewEmployeeButton.Click
        EnableAddActor(True)
    End Sub

    Private Sub AddUpdateButton_Click(sender As Object, e As EventArgs) Handles AddUpdateButton.Click
        If isAddEnabled() Then
            If safeToAdd() Then
                AddActor()
                UpdateActorList()
                ResultBox_SelectedValueChanged(ResultBox, Nothing)
                EnableAddActor(False)
            Else
                MsgBox("Please fill out all the information marked with a *")
            End If
        Else
            UpdateActor(ResultBox.SelectedValue)
            UpdateActorList()
        End If
    End Sub

    Private Sub DeleteEmployeeButton_Click(sender As Object, e As EventArgs) Handles DeleteEmployeeButton.Click
        DeleteActor(ResultBox.SelectedValue)
        UpdateActorList()
    End Sub

    Private Sub RateActorButton_Click(sender As Object, e As EventArgs) Handles RateActorButton.Click
        RateActor.ShowFor(ResultBox.SelectedValue)
    End Sub
End Class



'Person Type for use in the list
Public Class ActorType
    'Not completely accurate, but good enough
    Public Function GetActorAgeInYears(actor As ActorType) As Integer
        Dim curDate As DateTime = New DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day)
        Return (curDate.Year - actor.Age.Year)
    End Function

    Public Sub New(ByVal id As Integer, ByVal fname As String, ByVal lname As String, ByVal gender As String, ByVal age As DateTime)
        actorID = id
        actorName = fname
        actorLname = lname
        actorAge = age
        actorGender = gender


        displayStr = actorName + " " + actorLname + ", " + GetActorAgeInYears(Me).ToString + ", " + actorGender
    End Sub

    Private actorID As Integer
    Public Property ID() As Integer
        Get
            Return actorID
        End Get
        Set(ByVal value As Integer)
            actorID = value
        End Set
    End Property

    Private actorName As String
    Public Property Name() As String
        Get
            Return actorName
        End Get
        Set(ByVal value As String)
            actorName = value
        End Set
    End Property

    Private actorLname As String
    Public Property LName() As String
        Get
            Return actorLname
        End Get
        Set(ByVal value As String)
            actorLname = value
        End Set
    End Property

    Private actorAge As DateTime
    Public Property Age() As DateTime
        Get
            Return actorAge
        End Get
        Set(ByVal value As DateTime)
            actorAge = value
        End Set
    End Property

    Private actorGender As String
    Public Property Gender() As String
        Get
            Return actorGender
        End Get
        Set(ByVal value As String)
            actorGender = value
        End Set
    End Property

    Private displayStr As String
    Public Property Display() As String
        Get
            Return displayStr
        End Get
        Set(ByVal value As String)
            displayStr = value
        End Set
    End Property

    Public ReadOnly Property Itself() As ActorType
        Get
            Return Me
        End Get
    End Property

End Class