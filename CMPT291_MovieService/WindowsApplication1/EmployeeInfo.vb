Imports System.Data.OleDb

Public Class EmployeeInfo
    Private dataReader As OleDbDataReader
    Private connection As OleDbConnection = New OleDbConnection(LoginForm.GetConnectionString())
    Private command As OleDbCommand

    Private addMode As Boolean = False
    Private existingPerson As Boolean = False
    Private existingPersonID As Integer

    Private Function PersonExists() As Boolean
        Return existingPerson
    End Function

    Private Sub SetPersonExists(value As Boolean)
        existingPerson = value
    End Sub

    Private Function PersonExistID() As Integer
        Return existingPersonID
    End Function

    Private Sub SetPersonExistID(value As Integer)
        existingPersonID = value
    End Sub

    'Enables and disables various control based on log in access level
    Private Sub setAccessControl()
        'Enable some options for the manager that the employee cannot see
        If LoginForm.getAccessLevel() = 1 Then
            For Each item As Control In Me.Controls
                item.Visible = True
                item.Enabled = True
            Next

            'Some things are disabled until it is time to add a new userc
            UserNameBox.Enabled = False
            FindIDButton.Enabled = False
            StartDateBox.Enabled = False
            UserNameBox.Enabled = False
        Else
            For Each txtBox As Control In Me.Controls
                If txtBox.GetType() Is GetType(TextBox) Then
                    txtBox.Enabled = False
                End If
            Next
            PositionBox.Enabled = False
        End If

        'No one ever should fiddle with the date, it is generated by the system
        StartDateBox.Enabled = False
    End Sub

    'Return a list of plans for use in a  combobox
    Public Function GetEmployeeDescriptions() As List(Of PositionType)
        Dim positionDesc = New List(Of PositionType)
        Dim queryString As String = "SELECT PositionID, [Position] FROM EmpPositions"
        'Search for user name in table
        Try
            connection.Open()
            command = connection.CreateCommand()
            command.CommandText = queryString
            dataReader = command.ExecuteReader()

            Do While dataReader.Read()
                positionDesc.Add(New PositionType(dataReader(0), dataReader(1).ToString))
            Loop

        Catch ex As Exception
            MsgBox("Error finding plan types")
        End Try

        dataReader.Close()
        connection.Close()
        Return positionDesc
    End Function

    Private Sub populatePositionComboBox()
        'make all employed positions a selectable option
        PositionBox.DataSource = GetEmployeeDescriptions()
        PositionBox.DisplayMember = "Name"
        PositionBox.ValueMember = "ID"
        PositionBox.SelectedIndex = 0
    End Sub

    'Return whether or not we are adding a new employee
    Private Function isAddEnabled() As Boolean
        Return addMode
    End Function

    Private Sub EnableAddEmployee(enabled As Boolean)
        addMode = enabled

        'If we are adding a new employee, clear all text boxes and enable them 
        If addMode Then

            For Each txtBox As Control In Me.Controls
                If txtBox.GetType() Is GetType(TextBox) Then
                    txtBox.Enabled = True
                    txtBox.Text = Nothing
                End If
            Next
            StartDateBox.Text = New DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day)
            PositionBox.Enabled = True
            StartDateBox.Enabled = False
            'Default position to employee, so accidentaly manager positions aren't given
            PositionBox.SelectedValue = 2

            AddUpdateButton.Text = "Add Employee"
            ResultBox.Enabled = False

            FindIDButton.Enabled = True
            'can't delete an employee that already exists
            DeleteEmployeeButton.Enabled = False

            'Switch cancel/close button text
            CancelButton.Text = "Cancel"
        Else
            'Otherwise, set the default permissions
            setAccessControl()
            AddUpdateButton.Text = "Update Employee"
            CancelButton.Text = "Close"
        End If
    End Sub



    'Generate a list of all employees
    Private Function SearchForEmployees() As List(Of PersonType)
        Dim peopleItems = New List(Of PersonType)
        Try
            connection.Open()
            command = connection.CreateCommand()
            command.CommandText = "Select Employee.EmployeeID, FamilyName, GivenName, Zip, Phone from Person, Login, [Employee] Where" _
                                + " Person.PersonID = Login.PersonID and Login.EmployeeID = Employee.EmployeeID"

            dataReader = command.ExecuteReader()

            Do While dataReader.Read()
                peopleItems.Add(New PersonType(dataReader(0),
                                               dataReader(1).ToString + " " + dataReader(2).ToString,
                                               dataReader(3).ToString, dataReader(4).ToString))
            Loop

        Catch ex As Exception
            MsgBox(ex.ToString)
        End Try

        dataReader.Close()
        connection.Close()
        Return peopleItems
    End Function


    Private Sub GetEmployeeData(employeeID As Integer)

        Try
            connection.Open()
            command = connection.CreateCommand()
            command.CommandText = "Select Username, Password, FamilyName, GivenName, City, Address, Zip, Phone," _
                                + " PositionID, [StartDate], HourlyRate, SSNumber" _
                                + " from Person, Login, Employee Where" _
                                + " Login.EmployeeID = " + employeeID.ToString + " and" _
                                + " Login.EmployeeID = Employee.EmployeeID and" _
                                + " Person.PersonID = Login.PersonID"

            dataReader = command.ExecuteReader()

            'read searched data
            dataReader.Read()

            UserNameBox.Text = dataReader(0).ToString
            PassWordBox.Text = dataReader(1).ToString
            FnameBox.Text = dataReader(2).ToString
            LnameBox.Text = dataReader(3).ToString
            CityBox.Text = dataReader(4).ToString
            AddressBox.Text = dataReader(5).ToString
            ZipBox.Text = dataReader(6).ToString
            PhoneBox.Text = dataReader(7).ToString
            PositionBox.SelectedValue = dataReader(8)
            StartDateBox.Text = dataReader(9).ToString
            HourlyRateBox.Text = dataReader(10).ToString
            SSNumbBox.Text = dataReader(11).ToString

        Catch ex As Exception
            MsgBox(ex.ToString)
        End Try

        dataReader.Close()
        connection.Close()
    End Sub
    'Creates a new customer account and person, or links an existing person to a new customer account
    Private Sub AddEmployee()
        Dim personID As Integer
        Try
            connection.Open()
            command = connection.CreateCommand()

            'First, Insert person
            If Not PersonExists() Then
                command.CommandText = "insert into Person (FamilyName, GivenName, City, Address, State, Zip, Phone) Values (?,?,?,?,?,?,?)"
                command.Parameters.AddWithValue("FamilyName", FnameBox.Text)
                command.Parameters.AddWithValue("GivenName", LnameBox.Text)
                command.Parameters.AddWithValue("City", CityBox.Text)
                command.Parameters.AddWithValue("Address", AddressBox.Text)
                command.Parameters.AddWithValue("State", StateBox.Text)
                command.Parameters.AddWithValue("Zip", ZipBox.Text)
                command.Parameters.AddWithValue("Phone", PhoneBox.Text)
                'insert person into table
                command.ExecuteNonQuery()
                'Get the PersonID of the last inserted person record
                command.CommandText = "SELECT @@IDENTITY"
                personID = CInt(command.ExecuteScalar())
            Else
                personID = PersonExistID()
            End If




            'Insert Employee information Here
            Dim curDate = New DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day)
            command.CommandText = "insert into Employee (PersonID, PositionID, StartDate, HourlyRate, SSNumber) values (" _
                                  + personID.ToString + ", " + PositionBox.SelectedValue.ToString + ", #" + curDate + "#, " _
                                  + HourlyRateBox.Text + ", '" + SSNumbBox.Text + "')"

            command.ExecuteNonQuery()

            'Get the EmployeeID of the last inserted employee record
            command.CommandText = "SELECT @@IDENTITY"
            Dim employeeID = CInt(command.ExecuteScalar())


            'Insert Users Login Info
            command.CommandText = "insert into Login values ('" + personID.ToString + "', '" _
                                 + UserNameBox.Text + "','" _
                                 + PassWordBox.Text + "', " + employeeID.ToString + ")"
            command.ExecuteNonQuery()


            'Inform of successful addition
            If PersonExists() Then
                MsgBox("Successfully added existing person as " + PositionBox.SelectedItem)
            Else
                MsgBox("Successfully added " + PositionBox.SelectedItem)
            End If
        Catch ex As Exception
            MsgBox(ex.ToString)
        End Try

        connection.Close()
    End Sub

    Private Sub UpdateEmployee()
        Try
            connection.Open()
            command = connection.CreateCommand()
            'We don't want to update username or account number, so skip them
            'Since we haven't made a way to update only the changed fields, lets just update them all

            'Update the editabble password field (so we can change account passwords)
            command.CommandText = "Update Login set [Password] = '" + PassWordBox.Text + "' where [Username] = '" + UserNameBox.Text + "'"
            command.ExecuteNonQuery()

            'Now to update Person information
            'First get PersonID since that's the only user data so far not stored in the text fields
            command.CommandText = "select PersonID from Login where Username = '" + UserNameBox.Text + "'"
            dataReader = command.ExecuteReader()
            dataReader.Read() 'initial read for data
            Dim PersonID As Long = dataReader(0)
            dataReader.Close()

            'Now to update changes to Person fields
            command.CommandText = "Update Person set FamilyName = '" + FnameBox.Text + "', " _
                                + "GivenName = '" + LnameBox.Text + "', " _
                                + "City = '" + CityBox.Text + "', " _
                                + "Address = '" + AddressBox.Text + "', " _
                                + "State = '" + StateBox.Text + "', " _
                                + "Zip = '" + ZipBox.Text + "', " _
                                + "Phone = '" + PhoneBox.Text + "'" _
                                + " where PersonID = " + PersonID.ToString
            command.ExecuteNonQuery()


            'Then Update employee information
            command.CommandText = "Update Employee set PositionID = " + PositionBox.SelectedValue.ToString + ", " _
                                 + "HourlyRate = " + HourlyRateBox.Text _
                                 + "SSNumber = '" + SSNumbBox.Text + "'" _
                                 + " where EmployeeID = " + ResultBox.SelectedValue.ToString
            command.ExecuteNonQuery()

            MsgBox("Updated Employee")

        Catch ex As Exception
            MsgBox(ex.ToString)
        End Try

        connection.Close()
    End Sub

    'Returns the number of logins associated with a PersonID
    Private Function countIdentities(personID As Integer) As Integer
        Dim loginCount As Integer = 0

        Try
            connection.Open()
            command = connection.CreateCommand()
            command.CommandText = "Select Count(*) from Login Where PersonID = " + personID.ToString
            loginCount = command.ExecuteScalar()
        Catch ex As Exception
            MsgBox(ex.ToString)
        End Try

        connection.Close()
        Return loginCount
    End Function

    'Deletes an employee. If the employee person is also a customer, retains the persons information
    Private Sub DeleteEmployee()
        Try
            connection.Open()
            command = connection.CreateCommand()
            'First get PersonID since that's the only user data so far not stored in the text fields
            command.CommandText = "select PersonID from Login where Username = '" + UserNameBox.Text + "'"
            dataReader = command.ExecuteReader()
            dataReader.Read() 'initial read for data
            Dim PersonID As Integer = CInt(dataReader(0).ToString)
            dataReader.Close()


            'Then delete Employee account
            command.CommandText = "delete from Employee where EmployeeID = " + ResultBox.SelectedValue.ToString
            command.ExecuteNonQuery()

            'Finally delete login information
            command.CommandText = "delete from Login where PersonID = " + PersonID.ToString + " and EmployeeID = " + ResultBox.SelectedValue.ToString
            command.ExecuteNonQuery()

            'Then delete Person Information only if there is one login account associated with it
            'A person can have multiple login identities if they are an employee and a customer
            connection.Close()
            If countIdentities(PersonID) = 0 Then
                connection.Open()
                command.CommandText = "delete from Person where PersonID = " + PersonID.ToString
                command.ExecuteNonQuery()
            End If



            MsgBox(PositionBox.SelectedItem + " Deleted")
        Catch ex As Exception
            MsgBox(ex.ToString)
        End Try

        connection.Close()
    End Sub

    Public Sub importPersonData(idNo As Integer)
        Dim queryString As String = "SELECT *" _
                                     + " FROM Person" _
                                     + " Where PersonID = " + idNo.ToString
        Try
            connection.Open()
            command = connection.CreateCommand()
            command.CommandText = queryString
            dataReader = command.ExecuteReader()

            dataReader.Read() 'initial read for data
            FnameBox.Text = dataReader(1).ToString
            LnameBox.Text = dataReader(2).ToString
            CityBox.Text = dataReader(3).ToString
            AddressBox.Text = dataReader(4).ToString
            StateBox.Text = dataReader(5).ToString
            ZipBox.Text = dataReader(6).ToString
            PhoneBox.Text = dataReader(7).ToString
            SetPersonExists(True)
            SetPersonExistID(idNo)
        Catch ex As Exception
            'MsgBox(ex.ToString)
        End Try

        dataReader.Close()
        connection.Close()
    End Sub

    Private Function checkUserName(username As String) As Boolean
        Dim isFree = True
        Try
            connection.Open()
            command = connection.CreateCommand()
            command.CommandText = "Select Username from Login"
            dataReader = command.ExecuteReader()
            Do While dataReader.Read()
                If username = dataReader(0).ToString Then
                    isFree = False
                    Exit Do
                End If
            Loop
        Catch ex As Exception
            MsgBox(ex.ToString)
        End Try

        dataReader.Close()
        connection.Close()
        Return isFree
    End Function

    'Returns true if all the required data to add / edit a user has been filled in
    Private Function safeToAdd() As Boolean
        For Each txtBox As Control In Me.Controls
            If txtBox.GetType() Is GetType(TextBox) Then
                If txtBox.Text = Nothing Then
                    Return False
                End If
            End If
        Next

        Return True
    End Function
    'Populates the list box with all the current employees
    'The returned value from a selected entry in the list box, is the employee ID
    Private Sub UpdateEmployeeList()
        Dim entries As List(Of PersonType) = SearchForEmployees()
        If entries.Count = 0 Then
            MsgBox("No employees found")
            Me.Close()
        Else
            Dim str As String = entries.Count.ToString + " people found."
            MsgBox(str)
            ResultBox.DataSource = entries
            ResultBox.DisplayMember = "Display"
            ResultBox.ValueMember = "ID"
            ResultBox.SelectedIndex = 0
            setAccessControl()
        End If
    End Sub

    Private Sub EmployeeInfo_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        populatePositionComboBox()
        UpdateEmployeeList()
    End Sub

    Private Sub ResultBox_SelectedValueChanged(sender As Object, e As EventArgs) Handles ResultBox.SelectedValueChanged
        If ResultBox.SelectedValue.GetType() Is GetType(Integer) Then
            GetEmployeeData(ResultBox.SelectedValue)
        End If

    End Sub

    Private Sub AddUpdateButton_Click(sender As Object, e As EventArgs) Handles AddUpdateButton.Click
        If isAddEnabled() Then
            If safeToAdd() Then
                AddEmployee()
                UpdateEmployeeList()
                ResultBox_SelectedValueChanged(ResultBox, Nothing)
                SetPersonExists(False)
                EnableAddEmployee(False)
            Else
                MsgBox("Please fill out all the information marked with a *")
            End If
        Else
            UpdateEmployee()
        End If
    End Sub

    Private Sub NewEmployeeButton_Click(sender As Object, e As EventArgs) Handles NewEmployeeButton.Click
        EnableAddEmployee(True)
    End Sub

    Private Sub FindIDButton_Click(sender As Object, e As EventArgs) Handles FindIDButton.Click
        PersonLookUp.OpenFrom(Me)
    End Sub

    'Check username when focus lost
    Private Sub UserNameBox_Leave(sender As Object, e As EventArgs) Handles UserNameBox.Leave
        If checkUserName(UserNameBox.Text) = False Then
            UserNameBox.Text = Nothing
            MsgBox("User name already in use!")
        End If
    End Sub

    Private Sub DeleteEmployeeButton_Click(sender As Object, e As EventArgs) Handles DeleteEmployeeButton.Click
        DeleteEmployee()
        UpdateEmployeeList()
    End Sub

    Private Sub CancelButton_Click(sender As Object, e As EventArgs) Handles CancelButton.Click
        If isAddEnabled() Then
            'Cancel adding a new employee
            EnableAddEmployee(False)
            ResultBox_SelectedValueChanged(ResultBox, Nothing)
        Else
            'Otherwise, just close the menu
            Me.Close()
        End If

    End Sub
End Class

'Employee Type for combobox usage
Public Class PositionType
    Public Sub New(ByVal id As Integer, ByVal name As String)
        positionID = id
        positionName = name
    End Sub

    Private positionID As Integer
    Public Property ID() As Integer
        Get
            Return positionID
        End Get
        Set(ByVal value As Integer)
            positionID = value
        End Set
    End Property

    Private positionName As String
    Public Property Name() As String
        Get
            Return positionName
        End Get
        Set(ByVal value As String)
            positionName = value
        End Set
    End Property
End Class

'Person Type for use in the list
Public Class PersonType
    Public Sub New(ByVal id As Integer, ByVal name As String, ByVal zip As String, ByVal phone As String)
        personID = id
        personName = name
        personZip = zip
        personPhone = phone
        displayStr = personName + ", " + personZip + ", " + personPhone
    End Sub

    Private personID As Integer
    Public Property ID() As Integer
        Get
            Return personID
        End Get
        Set(ByVal value As Integer)
            personID = value
        End Set
    End Property

    Private personName As String
    Public Property Name() As String
        Get
            Return personName
        End Get
        Set(ByVal value As String)
            personName = value
        End Set
    End Property

    Private personZip As String
    Public Property ZipCode() As String
        Get
            Return personZip
        End Get
        Set(ByVal value As String)
            personZip = value
        End Set
    End Property

    Private personPhone As String
    Public Property Phone() As String
        Get
            Return personPhone
        End Get
        Set(ByVal value As String)
            personPhone = value
        End Set
    End Property

    Private displayStr As String
    Public Property Display() As String
        Get
            Return displayStr
        End Get
        Set(ByVal value As String)
            displayStr = value
        End Set
    End Property
End Class